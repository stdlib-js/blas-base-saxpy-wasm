{"version":3,"file":"index.mjs","sources":["../lib/binary.browser.js","../lib/module.js","../lib/routine.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base64ToUint8Array from '@stdlib/string-base-base64-to-uint8array';\n\n\n// MAIN //\n\nvar wasm = base64ToUint8Array( 'AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEYA2AAAGAGf31/f39/AGAIf31/f39/f38AAg8BA2VudgZtZW1vcnkCAAADBAMAAQIHTAQRX193YXNtX2NhbGxfY3RvcnMAABhfX3dhc21fYXBwbHlfZGF0YV9yZWxvY3MAAAdjX3NheHB5AAEPY19zYXhweV9uZGFycmF5AAIK4gQDAwABCz0BAn4gACABIAIgAyADrCIGQgEgAKwiB31+QgAgBkIAVxunIAQgBSAFrCIGQgEgB31+QgAgBkIAVxunEAILnQQBBX8CQCAAQQBMDQAgAUMAAAAAWw0AIANBAUYgBkEBRnFFBEAgAEEBRwRAIABB/v///wdxIQogBiAGaiELIAMgA2ohDANAIAUgB0ECdGoiCSABIAIgBEECdGoqAgCUIAkqAgCSOAIAIAUgBiAHakECdGoiCSABIAIgAyAEakECdGoqAgCUIAkqAgCSOAIAIAcgC2ohByAEIAxqIQQgCEECaiIIIApHDQALCyAAQQFxRQ0BIAUgB0ECdGoiACABIAIgBEECdGoqAgCUIAAqAgCSOAIADwsCQCAAQQNxIgMEQCAFIAdBAnRqIgYgASACIARBAnRqKgIAlCAGKgIAkjgCACAHQQFqIQYgBEEBaiEIAn8gA0EBRgRAIAYhByAIDAELIAUgBkECdGoiBiABIAIgCEECdGoqAgCUIAYqAgCSOAIAIAdBAmohBiAEQQJqIQggA0ECRgRAIAYhByAIDAELIAUgBkECdGoiBiABIAIgCEECdGoqAgCUIAYqAgCSOAIAIAdBA2ohByAEQQNqCyEEIABBBE4NAQwCCyAAQQRJDQELA0AgBSAHQQJ0aiIGIAEgAiAEQQJ0aiIIKgIAlCAGKgIAkjgCACAGIAEgCCoCBJQgBioCBJI4AgQgBiABIAgqAgiUIAYqAgiSOAIIIAYgASAIKgIMlCAGKgIMkjgCDCAHQQRqIQcgBEEEaiEEIANBBGoiAyAASA0ACwsL' );\n\n\n// EXPORTS //\n\nexport default wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isWebAssemblyMemory from '@stdlib/assert-is-wasm-memory';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport WasmModule from '@stdlib/wasm-module-wrapper';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport wasmBinary from './binary.js';\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var saxpy = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* saxpy.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* saxpy.write( xptr, oneTo( N, dtype ) );\n* saxpy.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = saxpy.main( N, 5.0, xptr, 1, yptr, 1 );\n* // returns <number>\n*\n* var bool = ( ptr === yptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* saxpy.read( yptr, view );\n* // view => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} yptr - output array pointer (i.e., byte offset)\n* @param {integer} strideY - `y` stride length\n* @returns {NonNegativeInteger} output array pointer (i.e., byte offset)\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var saxpy = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* saxpy.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* saxpy.write( xptr, oneTo( N, dtype ) );\n* saxpy.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = saxpy.main( N, 5.0, xptr, 1, yptr, 1 );\n* // returns <number>\n*\n* var bool = ( ptr === yptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* saxpy.read( yptr, view );\n* // view => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nsetReadOnly( Module.prototype, 'main', function saxpy( N, alpha, xptr, strideX, yptr, strideY ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_saxpy( N, alpha, xptr, strideX, yptr, strideY );\n\treturn yptr;\n});\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y` using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NonNegativeInteger} yptr - output array pointer (i.e., byte offset)\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NonNegativeInteger} output array pointer (i.e., byte offset)\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var saxpy = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* saxpy.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* saxpy.write( xptr, oneTo( N, dtype ) );\n* saxpy.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = saxpy.ndarray( N, 5.0, xptr, 1, 0, yptr, 1, 0 );\n* // returns <number>\n*\n* var bool = ( ptr === yptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* saxpy.read( yptr, view );\n* // view => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nsetReadOnly( Module.prototype, 'ndarray', function saxpy( N, alpha, xptr, strideX, offsetX, yptr, strideY, offsetY ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_saxpy_ndarray( N, alpha, xptr, strideX, offsetX, yptr, strideY, offsetY ); // eslint-disable-line max-len\n\treturn yptr;\n});\n\n\n// EXPORTS //\n\nexport default Module;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport { ndarray as readDataView } from '@stdlib/strided-base-read-dataview';\nimport Memory from '@stdlib/wasm-memory';\nimport arrays2ptrs from '@stdlib/wasm-base-arrays2ptrs';\nimport strided2object from '@stdlib/wasm-base-strided2object';\nimport Module from './module.js';\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var saxpy = new Routine();\n*\n* // Initialize the module:\n* saxpy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.main( x.length, 5.0, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var saxpy = new Routine();\n*\n* // Initialize the module:\n* saxpy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.ndarray( x.length, 5.0, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var saxpy = new Routine();\n*\n* // Initialize the module:\n* saxpy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.main( x.length, 5.0, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nsetReadOnly( Routine.prototype, 'main', function saxpy( N, alpha, x, strideX, y, strideY ) {\n\treturn this.ndarray( N, alpha, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n});\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y` using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var saxpy = new Routine();\n*\n* // Initialize the module:\n* saxpy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.ndarray( x.length, 5.0, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function saxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ptrs;\n\tvar p0;\n\tvar p1;\n\n\t// Convert the input arrays to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX ),\n\t\tstrided2object( N, y, strideY, offsetY )\n\t]);\n\tp0 = ptrs[ 0 ];\n\tp1 = ptrs[ 1 ];\n\n\t// Perform computation by calling the corresponding parent method:\n\tModule.prototype.ndarray.call( this, N, alpha, p0.ptr, p0.stride, p0.offset, p1.ptr, p1.stride, p1.offset ); // eslint-disable-line max-len\n\n\t// If the output array data had to be copied to module memory, copy the results to the provided output array...\n\tif ( p1.copy ) {\n\t\treadDataView( N, this.view, p1.stride*p1.BYTES_PER_ELEMENT, p1.ptr, y, strideY, offsetY, true ); // eslint-disable-line max-len\n\t}\n\treturn y;\n});\n\n\n// EXPORTS //\n\nexport default Routine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Routine from './routine.js';\n\n\n// MAIN //\n\n/**\n* WebAssembly module to multiply a vector `x` by a constant and add the result to `y`.\n*\n* @name saxpy\n* @type {Routine}\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.main( x.length, 5.0, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.ndarray( x.length, 5.0, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nvar saxpy = new Routine();\nsaxpy.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nexport default saxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to multiply a vector `x` by a constant `alpha` and add the result to `y`.\n*\n* @module @stdlib/blas-base-saxpy-wasm\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import saxpy from '@stdlib/blas-base-saxpy-wasm';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.main( x.length, 5.0, x, 1, y, 1 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import saxpy from '@stdlib/blas-base-saxpy-wasm';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* saxpy.ndarray( x.length, 5.0, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import saxpy from '@stdlib/blas-base-saxpy-wasm';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new saxpy.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n* mod.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* mod.main( N, 5.0, xptr, 1, yptr, 1 );\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* mod.read( yptr, view );\n*\n* console.log( view );\n* // => <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport Module from './module.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],"names":["wasm","base64ToUint8Array","Module","memory","this","isWebAssemblyMemory","TypeError","format","WasmModule","call","wasmBinary","env","Routine","Memory","initial","inherits","setReadOnly","prototype","N","alpha","xptr","strideX","yptr","strideY","_instance","exports","c_saxpy","offsetX","offsetY","c_saxpy_ndarray","x","y","ndarray","stride2offset","ptrs","p0","p1","arrays2ptrs","strided2object","ptr","stride","offset","copy","readDataView","view","BYTES_PER_ELEMENT","saxpy","initializeSync","main"],"mappings":";;8hCA2BA,IAAIA,EAAOC,EAAoB,ggCC6D/B,SAASC,EAAQC,GAChB,KAAQC,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,GAEpB,IAAME,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,6EAA8EJ,IAS5G,OANAK,EAAWC,KAAML,KAAMM,EAAYP,EAAQ,CAC1CQ,IAAO,CACNR,OAAUA,KAILC,IACR,CC1BA,SAASQ,IACR,OAAQR,gBAAgBQ,GAGxBV,EAAOO,KAAML,KAAM,IAAIS,EAAO,CAC7BC,QAAW,KAELV,MALC,IAAIQ,CAMb,CDqBAG,EAAUb,EAAQM,GA+DlBQ,EAAad,EAAOe,UAAW,QAAQ,SAAgBC,EAAGC,EAAOC,EAAMC,EAASC,EAAMC,GAErF,OADAnB,KAAKoB,UAAUC,QAAQC,QAASR,EAAGC,EAAOC,EAAMC,EAASC,EAAMC,GACxDD,CACR,IAiEAN,EAAad,EAAOe,UAAW,WAAW,SAAgBC,EAAGC,EAAOC,EAAMC,EAASM,EAASL,EAAMC,EAASK,GAE1G,OADAxB,KAAKoB,UAAUC,QAAQI,gBAAiBX,EAAGC,EAAOC,EAAMC,EAASM,EAASL,EAAMC,EAASK,GAClFN,CACR,ICxJAP,EAAUH,EAASV,GAkCnBc,EAAaJ,EAAQK,UAAW,QAAQ,SAAgBC,EAAGC,EAAOW,EAAGT,EAASU,EAAGR,GAChF,OAAOnB,KAAK4B,QAASd,EAAGC,EAAOW,EAAGT,EAASY,EAAef,EAAGG,GAAWU,EAAGR,EAASU,EAAef,EAAGK,GACvG,IAoCAP,EAAaJ,EAAQK,UAAW,WAAW,SAAgBC,EAAGC,EAAOW,EAAGT,EAASM,EAASI,EAAGR,EAASK,GACrG,IAAIM,EACAC,EACAC,EAiBJ,OAVAD,GAJAD,EAAOG,EAAajC,KAAM,CACzBkC,EAAgBpB,EAAGY,EAAGT,EAASM,GAC/BW,EAAgBpB,EAAGa,EAAGR,EAASK,MAErB,GACXQ,EAAKF,EAAM,GAGXhC,EAAOe,UAAUe,QAAQvB,KAAML,KAAMc,EAAGC,EAAOgB,EAAGI,IAAKJ,EAAGK,OAAQL,EAAGM,OAAQL,EAAGG,IAAKH,EAAGI,OAAQJ,EAAGK,QAG9FL,EAAGM,MACPC,EAAczB,EAAGd,KAAKwC,KAAMR,EAAGI,OAAOJ,EAAGS,kBAAmBT,EAAGG,IAAKR,EAAGR,EAASK,GAAS,GAEnFG,CACR,IC9HG,IAACe,EAAQ,IAAIlC,EAChBkC,EAAMC,iBCgDN/B,EAAAgC,EAAA,SAAA9C"}